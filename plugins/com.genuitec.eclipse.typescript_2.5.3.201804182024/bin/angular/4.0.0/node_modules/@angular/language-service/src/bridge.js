"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var language_service_1 = require("./language_service");
var types_1 = require("./types");
var typescript_host_1 = require("./typescript_host");
/** A plugin to TypeScript's langauge service that provide language services for
 * templates in string literals.
 *
 * @experimental
 */
var LanguageServicePlugin = (function () {
    function LanguageServicePlugin(config) {
        this.config = config;
        this.host = config.host;
        this.serviceHost = new typescript_host_1.TypeScriptServiceHost(config.host, config.service, config.basePath, config.logger);
        this.service = language_service_1.createLanguageService(this.serviceHost);
        this.serviceHost.setSite(this.service);
    }
    LanguageServicePlugin.prototype.validate = function (files) {
        var _this = this;
        var result = new Map();
        result.set(this.config.basePath, []);
        return this.serviceHost
            .updateProgram()
            .then(function (isAngularProject) {
            if (!isAngularProject) {
                return new Map();
            }
            _this.serviceHost.removeFileDuplicates(files).forEach(function (file) {
                try {
                    var diagsMap = _this.service.getDiagnostics(file);
                    if (diagsMap) {
                        diagsMap.forEach(pushDiags);
                    }
                }
                catch (err) {
                    pushDiags([{
                            kind: types_1.DiagnosticKind.Warning,
                            span: { start: 0, end: 0 },
                            message: "Internal error within Angular2 Template validator:\n" + (err.stack || err.message)
                        }], file);
                }
            });
            return Promise.resolve(result);
        }).catch(function (error) {
            if (error.message && error.message.startsWith("VAL_ERR:")) {
                pushDiags([{
                        kind: types_1.DiagnosticKind.Error,
                        span: { start: 0, end: 0 },
                        message: error.message.substring(8)
                    }], _this.config.basePath);
            }
            else {
                pushDiags([{
                        kind: types_1.DiagnosticKind.Warning,
                        span: { start: 0, end: 0 },
                        message: error.message
                            ? (error.message + "\nCannot perform validation of Angular 2 templates. See Error Log view for details.")
                            : ("Fatal error within Angular2 Template validator:\n" + error.stack)
                    }], _this.config.basePath);
                _this.config.logger.log(error);
            }
            return Promise.resolve(result);
        });
        function pushDiags(toPush, fileName) {
            var diags = result.get(fileName);
            if (!diags) {
                diags = [];
                result.set(fileName, diags);
            }
            diags.push.apply(diags, toPush);
        }
    };
    LanguageServicePlugin.prototype.getPromisedCompletionsAtPosition = function (fileName, position) {
        var _this = this;
        return this.serviceHost
            .updateProgram()
            .then(function (isAngularProject) { return Promise.resolve(isAngularProject ? _this.service.getCompletionsAt(fileName, position) : []); });
    };
    LanguageServicePlugin.prototype.getPromisedDefinitionAtPosition = function (fileName, position) {
        var _this = this;
        return this.serviceHost
            .updateProgram()
            .then(function (isAngularProject) { return Promise.resolve(isAngularProject ? _this.getDefinitionAtPosition(fileName, position) : []); });
    };
    LanguageServicePlugin.prototype.getCompletionsAtPositionSync = function (fileName, position) {
        var sourceFile = this.config.service.getProgram().getSourceFile(fileName);
        if ((!sourceFile || this.serviceHost.isWithinInlineTemplate(sourceFile, position))
            && (this.serviceHost.updateProgramSync())) {
            return this.service.getCompletionsAt(fileName, position);
        }
        return [];
    };
    LanguageServicePlugin.prototype.getCompletionEntryDetailsSync = function (fileName, position, name, kind) {
        var sourceFile = this.config.service.getProgram().getSourceFile(fileName);
        if ((!sourceFile || this.serviceHost.isWithinInlineTemplate(sourceFile, position))
            && (this.serviceHost.updateProgramSync())) {
            var info = this.service.getCompletionEntryDetails(fileName, position, name, kind);
            if (info) {
                return {
                    name: name,
                    kind: info.kind,
                    kindModifiers: info.kindModifiers,
                    displayParts: info.displayParts,
                    documentation: info.documentation,
                    tags: info.tags,
                };
            }
        }
        return null;
    };
    LanguageServicePlugin.prototype.getDefinitionAtPosition = function (fileName, position) {
        var result = this.service.getDefinitionAt(fileName, position);
        if (result) {
            return result.map(function (def) { return ({
                fileName: def.fileName,
                textSpan: { start: def.span.start, length: def.span.end - def.span.start },
                kind: def.kind,
                name: def.name,
                containerKind: def.containerKind,
                containerName: def.containerName,
            }); });
        }
    };
    LanguageServicePlugin.prototype.getQuickInfoAtPositionSync = function (fileName, position) {
        var sourceFile = this.config.service.getProgram().getSourceFile(fileName);
        if ((!sourceFile || this.serviceHost.isWithinInlineTemplate(sourceFile, position))
            && (this.serviceHost.updateProgramSync())) {
            var hover = this.service.getHoverAt(fileName, position);
            if (hover) {
                return {
                    kind: hover.kind,
                    kindModifiers: hover.kindModifiers,
                    displayParts: hover.displayParts,
                    documentation: hover.documentation,
                    textSpan: {
                        start: hover.span.start,
                        length: hover.span.end - hover.span.start
                    },
                    tags: hover.tags
                };
            }
        }
    };
    LanguageServicePlugin.prototype.createQuickFixes = function (quickFixRequests) {
        var _this = this;
        for (var _i = 0, quickFixRequests_1 = quickFixRequests; _i < quickFixRequests_1.length; _i++) {
            var req = quickFixRequests_1[_i];
            //only interested in angular requests
            if (req.type.startsWith("angular:")) {
                return this.serviceHost
                    .updateProgram()
                    .then(function (isAngularProject) { return Promise.resolve(isAngularProject ? _this.service.createQuickFixes(quickFixRequests) : {}); });
            }
        }
        return Promise.resolve({});
    };
    LanguageServicePlugin.prototype.prepareRefactoringChanges = function (projectName, type, files, parameters) {
        if (this.serviceHost.updateProgramSync()) {
            return this.service.prepareRefactoringChanges(projectName, type, files, parameters);
        }
        return {};
    };
    return LanguageServicePlugin;
}());
exports.LanguageServicePlugin = LanguageServicePlugin;
//# sourceMappingURL=bridge.js.map