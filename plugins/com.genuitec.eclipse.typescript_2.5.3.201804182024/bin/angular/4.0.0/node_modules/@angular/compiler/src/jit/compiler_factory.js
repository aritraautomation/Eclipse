"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var compile_reflector_1 = require("../compile_reflector");
var config_1 = require("../config");
var directive_normalizer_1 = require("../directive_normalizer");
var directive_resolver_1 = require("../directive_resolver");
var lexer_1 = require("../expression_parser/lexer");
var parser_1 = require("../expression_parser/parser");
var i18n = require("../i18n/index");
var injectable_1 = require("../injectable");
var metadata_resolver_1 = require("../metadata_resolver");
var html_parser_1 = require("../ml_parser/html_parser");
var ng_module_compiler_1 = require("../ng_module_compiler");
var ng_module_resolver_1 = require("../ng_module_resolver");
var pipe_resolver_1 = require("../pipe_resolver");
var resource_loader_1 = require("../resource_loader");
var dom_element_schema_registry_1 = require("../schema/dom_element_schema_registry");
var element_schema_registry_1 = require("../schema/element_schema_registry");
var style_compiler_1 = require("../style_compiler");
var summary_resolver_1 = require("../summary_resolver");
var template_parser_1 = require("../template_parser/template_parser");
var url_resolver_1 = require("../url_resolver");
var view_compiler_1 = require("../view_compiler/view_compiler");
var compiler_1 = require("./compiler");
var jit_reflector_1 = require("./jit_reflector");
var _NO_RESOURCE_LOADER = {
    get: function (url) {
        throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
    }
};
var baseHtmlParser = new core_1.InjectionToken('HtmlParser');
/**
 * A set of providers that provide `JitCompiler` and its dependencies to use for
 * template compilation.
 */
exports.COMPILER_PROVIDERS = [
    { provide: compile_reflector_1.CompileReflector, useValue: new jit_reflector_1.JitReflector() },
    { provide: resource_loader_1.ResourceLoader, useValue: _NO_RESOURCE_LOADER },
    summary_resolver_1.JitSummaryResolver,
    { provide: summary_resolver_1.SummaryResolver, useExisting: summary_resolver_1.JitSummaryResolver },
    core_1.ɵConsole,
    lexer_1.Lexer,
    parser_1.Parser,
    {
        provide: baseHtmlParser,
        useClass: html_parser_1.HtmlParser,
    },
    {
        provide: i18n.I18NHtmlParser,
        useFactory: function (parser, translations, format, config, console) {
            translations = translations || '';
            var missingTranslation = translations ? config.missingTranslation : core_1.MissingTranslationStrategy.Ignore;
            return new i18n.I18NHtmlParser(parser, translations, format, missingTranslation, console);
        },
        deps: [
            baseHtmlParser,
            [new core_1.Optional(), new core_1.Inject(core_1.TRANSLATIONS)],
            [new core_1.Optional(), new core_1.Inject(core_1.TRANSLATIONS_FORMAT)],
            [config_1.CompilerConfig],
            [core_1.ɵConsole],
        ]
    },
    {
        provide: html_parser_1.HtmlParser,
        useExisting: i18n.I18NHtmlParser,
    },
    template_parser_1.TemplateParser,
    directive_normalizer_1.DirectiveNormalizer,
    metadata_resolver_1.CompileMetadataResolver,
    url_resolver_1.DEFAULT_PACKAGE_URL_PROVIDER,
    style_compiler_1.StyleCompiler,
    view_compiler_1.ViewCompiler,
    ng_module_compiler_1.NgModuleCompiler,
    { provide: config_1.CompilerConfig, useValue: new config_1.CompilerConfig() },
    compiler_1.JitCompiler,
    { provide: core_1.Compiler, useExisting: compiler_1.JitCompiler },
    dom_element_schema_registry_1.DomElementSchemaRegistry,
    { provide: element_schema_registry_1.ElementSchemaRegistry, useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry },
    url_resolver_1.UrlResolver,
    directive_resolver_1.DirectiveResolver,
    pipe_resolver_1.PipeResolver,
    ng_module_resolver_1.NgModuleResolver,
];
var JitCompilerFactory = (function () {
    function JitCompilerFactory(defaultOptions) {
        var compilerOptions = {
            useDebug: core_1.isDevMode(),
            useJit: true,
            defaultEncapsulation: core_1.ViewEncapsulation.Emulated,
            missingTranslation: core_1.MissingTranslationStrategy.Warning,
            enableLegacyTemplate: true,
            preserveWhitespaces: true,
        };
        this._defaultOptions = [compilerOptions].concat(defaultOptions);
    }
    JitCompilerFactory.prototype.createCompiler = function (options) {
        if (options === void 0) { options = []; }
        var opts = _mergeOptions(this._defaultOptions.concat(options));
        var injector = core_1.ReflectiveInjector.resolveAndCreate([
            exports.COMPILER_PROVIDERS, {
                provide: config_1.CompilerConfig,
                useFactory: function () {
                    return new config_1.CompilerConfig({
                        // let explicit values from the compiler options overwrite options
                        // from the app providers
                        useJit: opts.useJit,
                        // let explicit values from the compiler options overwrite options
                        // from the app providers
                        defaultEncapsulation: opts.defaultEncapsulation,
                        missingTranslation: opts.missingTranslation,
                        enableLegacyTemplate: opts.enableLegacyTemplate,
                        preserveWhitespaces: opts.preserveWhitespaces,
                    });
                },
                deps: []
            },
            opts.providers
        ]);
        return injector.get(core_1.Compiler);
    };
    return JitCompilerFactory;
}());
JitCompilerFactory.decorators = [
    { type: injectable_1.CompilerInjectable },
];
/** @nocollapse */
JitCompilerFactory.ctorParameters = function () { return [
    { type: Array, decorators: [{ type: core_1.Inject, args: [core_1.COMPILER_OPTIONS,] },] },
]; };
exports.JitCompilerFactory = JitCompilerFactory;
/**
 * A platform that included corePlatform and the compiler.
 *
 * @experimental
 */
exports.platformCoreDynamic = core_1.createPlatformFactory(core_1.platformCore, 'coreDynamic', [
    { provide: core_1.COMPILER_OPTIONS, useValue: {}, multi: true },
    { provide: core_1.CompilerFactory, useClass: JitCompilerFactory },
]);
function _mergeOptions(optionsArr) {
    return {
        useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
        defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
        providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; })),
        missingTranslation: _lastDefined(optionsArr.map(function (options) { return options.missingTranslation; })),
        enableLegacyTemplate: _lastDefined(optionsArr.map(function (options) { return options.enableLegacyTemplate; })),
        preserveWhitespaces: _lastDefined(optionsArr.map(function (options) { return options.preserveWhitespaces; })),
    };
}
function _lastDefined(args) {
    for (var i = args.length - 1; i >= 0; i--) {
        if (args[i] !== undefined) {
            return args[i];
        }
    }
    return undefined;
}
function _mergeArrays(parts) {
    var result = [];
    parts.forEach(function (part) { return part && result.push.apply(result, part); });
    return result;
}
//# sourceMappingURL=compiler_factory.js.map