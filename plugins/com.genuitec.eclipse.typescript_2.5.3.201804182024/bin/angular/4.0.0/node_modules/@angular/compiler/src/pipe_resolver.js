"use strict";
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var compile_reflector_1 = require("./compile_reflector");
var directive_resolver_1 = require("./directive_resolver");
var injectable_1 = require("./injectable");
function _isPipeMetadata(type) {
    return type instanceof core_1.Pipe;
}
/**
 * Resolve a `Type` for {@link Pipe}.
 *
 * This interface can be overridden by the application developer to create custom behavior.
 *
 * See {@link Compiler}
 */
var PipeResolver = (function () {
    function PipeResolver(_reflector) {
        this._reflector = _reflector;
    }
    PipeResolver.prototype.isPipe = function (type) {
        var typeMetadata = this._reflector.annotations(core_1.resolveForwardRef(type));
        return typeMetadata && typeMetadata.some(_isPipeMetadata);
    };
    /**
     * Return {@link Pipe} for a given `Type`.
     */
    PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
        if (throwIfNotFound === void 0) { throwIfNotFound = true; }
        var metas = this._reflector.annotations(core_1.resolveForwardRef(type));
        if (metas) {
            var annotation = directive_resolver_1.findLast(metas, _isPipeMetadata);
            if (annotation) {
                return annotation;
            }
        }
        if (throwIfNotFound) {
            throw new Error("No Pipe decorator found on " + core_1.Éµstringify(type));
        }
        return null;
    };
    return PipeResolver;
}());
PipeResolver.decorators = [
    { type: injectable_1.CompilerInjectable },
];
/** @nocollapse */
PipeResolver.ctorParameters = function () { return [
    { type: compile_reflector_1.CompileReflector, },
]; };
exports.PipeResolver = PipeResolver;
//# sourceMappingURL=pipe_resolver.js.map