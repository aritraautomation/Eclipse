/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
"use strict";
/**
 * Extract i18n messages from source code
 */
var core_1 = require('@angular/core');
var compiler_1 = require('../aot/compiler');
var static_reflection_capabilities_1 = require('../aot/static_reflection_capabilities');
var static_reflector_1 = require('../aot/static_reflector');
var static_symbol_1 = require('../aot/static_symbol');
var static_symbol_resolver_1 = require('../aot/static_symbol_resolver');
var summary_resolver_1 = require('../aot/summary_resolver');
var config_1 = require('../config');
var directive_normalizer_1 = require('../directive_normalizer');
var directive_resolver_1 = require('../directive_resolver');
var metadata_resolver_1 = require('../metadata_resolver');
var html_parser_1 = require('../ml_parser/html_parser');
var interpolation_config_1 = require('../ml_parser/interpolation_config');
var ng_module_resolver_1 = require('../ng_module_resolver');
var pipe_resolver_1 = require('../pipe_resolver');
var dom_element_schema_registry_1 = require('../schema/dom_element_schema_registry');
var url_resolver_1 = require('../url_resolver');
var i18n_html_parser_1 = require('./i18n_html_parser');
var message_bundle_1 = require('./message_bundle');
var Extractor = (function () {
    function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
        this.host = host;
        this.staticSymbolResolver = staticSymbolResolver;
        this.messageBundle = messageBundle;
        this.metadataResolver = metadataResolver;
    }
    Extractor.prototype.extract = function (rootFiles) {
        var _this = this;
        var programSymbols = compiler_1.extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);
        var _a = compiler_1.analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;
        return Promise
            .all(ngModules.map(function (ngModule) { return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
            .then(function () {
            var errors = [];
            files.forEach(function (file) {
                var compMetas = [];
                file.directives.forEach(function (directiveType) {
                    var dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);
                    if (dirMeta && dirMeta.isComponent) {
                        compMetas.push(dirMeta);
                    }
                });
                compMetas.forEach(function (compMeta) {
                    var html = compMeta.template.template;
                    var interpolationConfig = interpolation_config_1.InterpolationConfig.fromArray(compMeta.template.interpolation);
                    errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
                });
            });
            if (errors.length) {
                throw new Error(errors.map(function (e) { return e.toString(); }).join('\n'));
            }
            return _this.messageBundle;
        });
    };
    Extractor.create = function (host) {
        var htmlParser = new i18n_html_parser_1.I18NHtmlParser(new html_parser_1.HtmlParser());
        var urlResolver = url_resolver_1.createOfflineCompileUrlResolver();
        var symbolCache = new static_symbol_1.StaticSymbolCache();
        var summaryResolver = new summary_resolver_1.AotSummaryResolver(host, symbolCache);
        var staticSymbolResolver = new static_symbol_resolver_1.StaticSymbolResolver(host, symbolCache, summaryResolver);
        var staticReflector = new static_reflector_1.StaticReflector(staticSymbolResolver);
        static_reflection_capabilities_1.StaticAndDynamicReflectionCapabilities.install(staticReflector);
        var config = new config_1.CompilerConfig({
            genDebugInfo: false,
            defaultEncapsulation: core_1.ViewEncapsulation.Emulated,
            logBindingUpdate: false,
            useJit: false
        });
        var normalizer = new directive_normalizer_1.DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);
        var elementSchemaRegistry = new dom_element_schema_registry_1.DomElementSchemaRegistry();
        var resolver = new metadata_resolver_1.CompileMetadataResolver(new ng_module_resolver_1.NgModuleResolver(staticReflector), new directive_resolver_1.DirectiveResolver(staticReflector), new pipe_resolver_1.PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
        // TODO(vicb): implicit tags & attributes
        var messageBundle = new message_bundle_1.MessageBundle(htmlParser, [], {});
        var extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
        return { extractor: extractor, staticReflector: staticReflector };
    };
    return Extractor;
}());
exports.Extractor = Extractor;
//# sourceMappingURL=extractor.js.map