/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
"use strict";
var core_1 = require('@angular/core');
var animation_parser_1 = require('../animation/animation_parser');
var config_1 = require('../config');
var directive_normalizer_1 = require('../directive_normalizer');
var directive_resolver_1 = require('../directive_resolver');
var directive_wrapper_compiler_1 = require('../directive_wrapper_compiler');
var lexer_1 = require('../expression_parser/lexer');
var parser_1 = require('../expression_parser/parser');
var i18n_html_parser_1 = require('../i18n/i18n_html_parser');
var metadata_resolver_1 = require('../metadata_resolver');
var html_parser_1 = require('../ml_parser/html_parser');
var ng_module_compiler_1 = require('../ng_module_compiler');
var ng_module_resolver_1 = require('../ng_module_resolver');
var ts_emitter_1 = require('../output/ts_emitter');
var pipe_resolver_1 = require('../pipe_resolver');
var private_import_core_1 = require('../private_import_core');
var dom_element_schema_registry_1 = require('../schema/dom_element_schema_registry');
var style_compiler_1 = require('../style_compiler');
var template_parser_1 = require('../template_parser/template_parser');
var url_resolver_1 = require('../url_resolver');
var view_compiler_1 = require('../view_compiler/view_compiler');
var compiler_1 = require('./compiler');
var static_reflection_capabilities_1 = require('./static_reflection_capabilities');
var static_reflector_1 = require('./static_reflector');
var static_symbol_1 = require('./static_symbol');
var static_symbol_resolver_1 = require('./static_symbol_resolver');
var summary_resolver_1 = require('./summary_resolver');
/**
 * Creates a new AotCompiler based on options and a host.
 */
function createAotCompiler(compilerHost, options) {
    var translations = options.translations || '';
    var urlResolver = url_resolver_1.createOfflineCompileUrlResolver();
    var symbolCache = new static_symbol_1.StaticSymbolCache();
    var summaryResolver = new summary_resolver_1.AotSummaryResolver(compilerHost, symbolCache);
    var symbolResolver = new static_symbol_resolver_1.StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
    var staticReflector = new static_reflector_1.StaticReflector(symbolResolver);
    static_reflection_capabilities_1.StaticAndDynamicReflectionCapabilities.install(staticReflector);
    var htmlParser = new i18n_html_parser_1.I18NHtmlParser(new html_parser_1.HtmlParser(), translations, options.i18nFormat);
    var config = new config_1.CompilerConfig({
        genDebugInfo: options.debug === true,
        defaultEncapsulation: core_1.ViewEncapsulation.Emulated,
        logBindingUpdate: false,
        useJit: false
    });
    var normalizer = new directive_normalizer_1.DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);
    var expressionParser = new parser_1.Parser(new lexer_1.Lexer());
    var elementSchemaRegistry = new dom_element_schema_registry_1.DomElementSchemaRegistry();
    var console = new private_import_core_1.Console();
    var tmplParser = new template_parser_1.TemplateParser(expressionParser, elementSchemaRegistry, htmlParser, console, []);
    var resolver = new metadata_resolver_1.CompileMetadataResolver(new ng_module_resolver_1.NgModuleResolver(staticReflector), new directive_resolver_1.DirectiveResolver(staticReflector), new pipe_resolver_1.PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
    // TODO(vicb): do not pass options.i18nFormat here
    var compiler = new compiler_1.AotCompiler(compilerHost, resolver, tmplParser, new style_compiler_1.StyleCompiler(urlResolver), new view_compiler_1.ViewCompiler(config, elementSchemaRegistry), new directive_wrapper_compiler_1.DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console), new ng_module_compiler_1.NgModuleCompiler(), new ts_emitter_1.TypeScriptEmitter(compilerHost), summaryResolver, options.locale, options.i18nFormat, new animation_parser_1.AnimationParser(elementSchemaRegistry), symbolResolver);
    return { compiler: compiler, reflector: staticReflector };
}
exports.createAotCompiler = createAotCompiler;
//# sourceMappingURL=compiler_factory.js.map