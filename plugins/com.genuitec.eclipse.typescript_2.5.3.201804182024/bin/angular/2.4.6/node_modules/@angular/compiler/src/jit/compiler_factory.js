/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var animation_parser_1 = require('../animation/animation_parser');
var config_1 = require('../config');
var directive_normalizer_1 = require('../directive_normalizer');
var directive_resolver_1 = require('../directive_resolver');
var directive_wrapper_compiler_1 = require('../directive_wrapper_compiler');
var lexer_1 = require('../expression_parser/lexer');
var parser_1 = require('../expression_parser/parser');
var i18n = require('../i18n/index');
var injectable_1 = require('../injectable');
var metadata_resolver_1 = require('../metadata_resolver');
var html_parser_1 = require('../ml_parser/html_parser');
var ng_module_compiler_1 = require('../ng_module_compiler');
var ng_module_resolver_1 = require('../ng_module_resolver');
var pipe_resolver_1 = require('../pipe_resolver');
var private_import_core_1 = require('../private_import_core');
var resource_loader_1 = require('../resource_loader');
var dom_element_schema_registry_1 = require('../schema/dom_element_schema_registry');
var element_schema_registry_1 = require('../schema/element_schema_registry');
var style_compiler_1 = require('../style_compiler');
var summary_resolver_1 = require('../summary_resolver');
var template_parser_1 = require('../template_parser/template_parser');
var url_resolver_1 = require('../url_resolver');
var view_compiler_1 = require('../view_compiler/view_compiler');
var compiler_1 = require('./compiler');
var _NO_RESOURCE_LOADER = {
    get: function (url) {
        throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
    }
};
var baseHtmlParser = new core_1.OpaqueToken('HtmlParser');
/**
 * A set of providers that provide `JitCompiler` and its dependencies to use for
 * template compilation.
 */
exports.COMPILER_PROVIDERS = [
    { provide: private_import_core_1.Reflector, useValue: private_import_core_1.reflector },
    { provide: private_import_core_1.ReflectorReader, useExisting: private_import_core_1.Reflector },
    { provide: resource_loader_1.ResourceLoader, useValue: _NO_RESOURCE_LOADER },
    summary_resolver_1.SummaryResolver,
    private_import_core_1.Console,
    lexer_1.Lexer,
    parser_1.Parser,
    {
        provide: baseHtmlParser,
        useClass: html_parser_1.HtmlParser,
    },
    {
        provide: i18n.I18NHtmlParser,
        useFactory: function (parser, translations, format) {
            return new i18n.I18NHtmlParser(parser, translations, format);
        },
        deps: [
            baseHtmlParser,
            [new core_1.Optional(), new core_1.Inject(core_1.TRANSLATIONS)],
            [new core_1.Optional(), new core_1.Inject(core_1.TRANSLATIONS_FORMAT)],
        ]
    },
    {
        provide: html_parser_1.HtmlParser,
        useExisting: i18n.I18NHtmlParser,
    },
    template_parser_1.TemplateParser,
    directive_normalizer_1.DirectiveNormalizer,
    metadata_resolver_1.CompileMetadataResolver,
    url_resolver_1.DEFAULT_PACKAGE_URL_PROVIDER,
    style_compiler_1.StyleCompiler,
    view_compiler_1.ViewCompiler,
    ng_module_compiler_1.NgModuleCompiler,
    directive_wrapper_compiler_1.DirectiveWrapperCompiler,
    { provide: config_1.CompilerConfig, useValue: new config_1.CompilerConfig() },
    compiler_1.JitCompiler,
    { provide: core_1.Compiler, useExisting: compiler_1.JitCompiler },
    dom_element_schema_registry_1.DomElementSchemaRegistry,
    { provide: element_schema_registry_1.ElementSchemaRegistry, useExisting: dom_element_schema_registry_1.DomElementSchemaRegistry },
    url_resolver_1.UrlResolver,
    directive_resolver_1.DirectiveResolver,
    pipe_resolver_1.PipeResolver,
    ng_module_resolver_1.NgModuleResolver,
    animation_parser_1.AnimationParser
];
var JitCompilerFactory = (function () {
    function JitCompilerFactory(defaultOptions) {
        this._defaultOptions = [{
                useDebug: core_1.isDevMode(),
                useJit: true,
                defaultEncapsulation: core_1.ViewEncapsulation.Emulated
            }].concat(defaultOptions);
    }
    JitCompilerFactory.prototype.createCompiler = function (options) {
        if (options === void 0) { options = []; }
        var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
        var injector = core_1.ReflectiveInjector.resolveAndCreate([
            exports.COMPILER_PROVIDERS, {
                provide: config_1.CompilerConfig,
                useFactory: function () {
                    return new config_1.CompilerConfig({
                        // let explicit values from the compiler options overwrite options
                        // from the app providers. E.g. important for the testing platform.
                        genDebugInfo: mergedOptions.useDebug,
                        // let explicit values from the compiler options overwrite options
                        // from the app providers
                        useJit: mergedOptions.useJit,
                        // let explicit values from the compiler options overwrite options
                        // from the app providers
                        defaultEncapsulation: mergedOptions.defaultEncapsulation,
                        logBindingUpdate: mergedOptions.useDebug
                    });
                },
                deps: []
            },
            mergedOptions.providers
        ]);
        return injector.get(core_1.Compiler);
    };
    /** @nocollapse */
    JitCompilerFactory.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: core_1.Inject, args: [core_1.COMPILER_OPTIONS,] },] },
    ]; };
    JitCompilerFactory = __decorate([
        injectable_1.CompilerInjectable(), 
        __metadata('design:paramtypes', [Array])
    ], JitCompilerFactory);
    return JitCompilerFactory;
}());
exports.JitCompilerFactory = JitCompilerFactory;
function _initReflector() {
    private_import_core_1.reflector.reflectionCapabilities = new private_import_core_1.ReflectionCapabilities();
}
/**
 * A platform that included corePlatform and the compiler.
 *
 * @experimental
 */
exports.platformCoreDynamic = core_1.createPlatformFactory(core_1.platformCore, 'coreDynamic', [
    { provide: core_1.COMPILER_OPTIONS, useValue: {}, multi: true },
    { provide: core_1.CompilerFactory, useClass: JitCompilerFactory },
    { provide: core_1.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
]);
function _mergeOptions(optionsArr) {
    return {
        useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug; })),
        useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
        defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
        providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; }))
    };
}
function _lastDefined(args) {
    for (var i = args.length - 1; i >= 0; i--) {
        if (args[i] !== undefined) {
            return args[i];
        }
    }
    return undefined;
}
function _mergeArrays(parts) {
    var result = [];
    parts.forEach(function (part) { return part && result.push.apply(result, part); });
    return result;
}
//# sourceMappingURL=compiler_factory.js.map