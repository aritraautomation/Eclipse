"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var compiler_1 = require("@angular/compiler");
function getQuickFixes(diag) {
    if (diag.message === "The <template> element is deprecated. Use <ng-template> instead") {
        return [{
                title: "Convert to <ng-template>",
                description: "Change deprecated <template> element to <ng-template> instead.",
                imageName: "angular",
                type: "angular:deprecated-template-fix"
            }];
    }
    return;
}
exports.getQuickFixes = getQuickFixes;
function createQuickFixes(template, request) {
    if (template && request.type === "angular:deprecated-template-fix") {
        return createDeprecatedTemplateFix(template);
    }
}
exports.createQuickFixes = createQuickFixes;
function mergeQuickFixResults(results) {
    var result = {};
    for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {
        var qfRes = results_1[_i];
        for (var file in qfRes) {
            result[file] = (result[file] || []).concat(qfRes[file]);
        }
    }
    return Promise.resolve(result);
}
exports.mergeQuickFixResults = mergeQuickFixResults;
function createDeprecatedTemplateFix(template) {
    var path = compiler_1.findNode(template.htmlAst, (template.position));
    if (!(path.tail instanceof compiler_1.Element)) {
        return;
    }
    var el = path.tail;
    if (el.name !== "template") {
        return;
    }
    var contents = template.template.source;
    var startTag = el.startSourceSpan && el.startSourceSpan.start.offset;
    if (startTag == null || (startTag && contents.substr(startTag, "<template".length) !== "<template")) {
        return;
    }
    var endTag = el.endSourceSpan && el.endSourceSpan.start.offset;
    if (endTag == null || (endTag && contents.substr(endTag, "</template".length) !== "</template")) {
        return;
    }
    var res = {};
    res[template.fileName] = [{
            newText: "ng-",
            span: {
                start: startTag + 1,
                length: 0
            }
        }, {
            newText: "ng-",
            span: {
                start: endTag + 2,
                length: 0
            }
        }];
    return res;
}
//# sourceMappingURL=quickFixes.js.map